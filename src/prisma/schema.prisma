generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeDocument {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  partners  Partner[]
  directors Director[]
  actors    Actor[]
}

model TypePhone {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  partners  Partner[]
  directors Director[]
  actors    Actor[]
}

model Partner {
  id                String             @id @default(uuid())
  credential        String             @unique
  name              String
  typeDocumentId    String
  typeDocument      TypeDocument       @relation(fields: [typeDocumentId], references: [id])
  document          String
  typePhoneId       String
  typePhone         TypePhone          @relation(fields: [typePhoneId], references: [id])
  phone             String
  address           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  favoriteDirectors FavoriteDirector[]
  favoriteActors    FavoriteActor[]
  favoriteGenres    FavoriteGenre[]
  waitingLists      WaitingList[]
  loans             Loan[]
}

model Actor {
  id             String          @id @default(uuid())
  name           String
  typeDocumentId String
  typeDocument   TypeDocument    @relation(fields: [typeDocumentId], references: [id])
  document       String          @unique
  typePhoneId    String
  typePhone      TypePhone       @relation(fields: [typePhoneId], references: [id])
  phone          String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  actorMovies    actorMovie[]
  favoriteActors FavoriteActor[]
}

model Director {
  id                String             @id @default(uuid())
  name              String
  typeDocumentId    String
  typeDocument      TypeDocument       @relation(fields: [typeDocumentId], references: [id])
  document          String             @unique
  typePhoneId       String
  typePhone         TypePhone          @relation(fields: [typePhoneId], references: [id])
  phone             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  movies            Movie[]
  favoriteDirectors FavoriteDirector[]
}

model Genre {
  id             String          @id @default(uuid())
  name           String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  movies         Movie[]
  favoriteGenres FavoriteGenre[]
}

model Movie {
  id          String       @id @default(uuid())
  name        String       @unique
  duration    Int
  directorId  String
  director    Director     @relation(fields: [directorId], references: [id])
  genreId     String
  genre       Genre        @relation(fields: [genreId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  films       Film[]
  actorMovies actorMovie[]
}

model filmState {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  films     Film[]
}

model Film {
  id           String        @id @default(uuid())
  number       Int           @unique
  movieId      String
  movie        Movie         @relation(fields: [movieId], references: [id])
  filmStateId  String
  filmState    filmState     @relation(fields: [filmStateId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  loans        Loan[]
  waitingLists WaitingList[]
}

model actorMovie {
  id        String   @id @default(uuid())
  actorId   String
  actor     Actor    @relation(fields: [actorId], references: [id])
  movieId   String
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model loanState {
  id    String @id @default(uuid())
  name  String @unique
  Loans Loan[]
}

model Loan {
  id          String    @id @default(uuid()) 
  succession  Int       @unique
  partnerId   String
  partner     Partner   @relation(fields: [partnerId], references: [id])
  filmId      String
  film        Film      @relation(fields: [filmId], references: [id])
  loanStateId String
  loanState   loanState @relation(fields: [loanStateId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FavoriteDirector {
  id         String   @id @default(uuid())
  directorId String
  director   Director @relation(fields: [directorId], references: [id])
  partnerId  String
  partner    Partner  @relation(fields: [partnerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FavoriteActor {
  id        String   @id @default(uuid())
  actorId   String
  actor     Actor    @relation(fields: [actorId], references: [id])
  partnerId String
  partner   Partner  @relation(fields: [partnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteGenre {
  id        String   @id @default(uuid())
  genreId   String
  genre     Genre    @relation(fields: [genreId], references: [id])
  partnerId String
  partner   Partner  @relation(fields: [partnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaitingState {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  waitingList WaitingList[]
}

model WaitingList {
  id             String       @id @default(uuid())
  waitingStateId String
  waitingState   WaitingState @relation(fields: [waitingStateId], references: [id])
  partnerId      String
  partner        Partner      @relation(fields: [partnerId], references: [id])
  filmId         String
  film           Film         @relation(fields: [filmId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
